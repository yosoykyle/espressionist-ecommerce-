"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/admin/page",{

/***/ "(app-pages-browser)/./lib/api-service.ts":
/*!****************************!*\
  !*** ./lib/api-service.ts ***!
  \****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   adminOrderService: () => (/* binding */ adminOrderService),\n/* harmony export */   adminProductService: () => (/* binding */ adminProductService),\n/* harmony export */   adminUserService: () => (/* binding */ adminUserService),\n/* harmony export */   authService: () => (/* binding */ authService),\n/* harmony export */   orderService: () => (/* binding */ orderService),\n/* harmony export */   productService: () => (/* binding */ productService)\n/* harmony export */ });\n/**\n * API Service Layer\n *\n * This service layer provides an abstraction for API calls to the backend.\n * Currently using localStorage for data persistence, but designed to be easily\n * refactored to use real API endpoints from a Spring Boot backend.\n *\n * Future Implementation Notes:\n * - Replace localStorage operations with fetch() calls to the corresponding endpoints\n * - Add proper error handling for network requests\n * - Implement authentication for admin endpoints\n */ // JWT storage helper\nfunction getJwt() {\n    return  true ? localStorage.getItem(\"jwt\") : 0;\n}\n// Utility to extract error message from backend response\nasync function extractError(response) {\n    try {\n        const data = await response.json();\n        if (data && data.message) return data.message;\n        if (typeof data === 'string') return data;\n        return response.statusText;\n    } catch (e) {\n        return response.statusText;\n    }\n}\n// ==================== USER-FACING API SERVICES ====================\nconst productService = {\n    /**\n   * Get all active products\n   * Calls GET /api/products\n   */ getAllProducts: async ()=>{\n        const response = await fetch(\"/api/products\");\n        if (!response.ok) throw new Error(await extractError(response));\n        return response.json();\n    },\n    /**\n   * Get product by ID\n   * Calls GET /api/products/{id}\n   */ getProductById: async (id)=>{\n        const response = await fetch(\"/api/products/\".concat(id));\n        if (response.status === 404) return null;\n        if (!response.ok) throw new Error(await extractError(response));\n        return response.json();\n    },\n    /**\n   * Get product image URL\n   * Calls GET /api/products/{id}/image\n   */ getProductImageUrl: (id)=>{\n        return \"/api/products/\".concat(id, \"/image\");\n    }\n};\nconst orderService = {\n    /**\n   * Place an order\n   * Calls POST /api/checkout\n   */ placeOrder: async (orderData)=>{\n        // Do NOT send JWT for public checkout\n        const headers = {\n            \"Content-Type\": \"application/json\"\n        };\n        const response = await fetch(\"/api/checkout\", {\n            method: \"POST\",\n            headers,\n            body: JSON.stringify(orderData)\n        });\n        if (!response.ok) {\n            if (response.status === 401 || response.status === 403) throw new Error(\"Unauthorized\");\n            throw new Error(await extractError(response));\n        }\n        return response.json();\n    },\n    /**\n   * Get order by code\n   * Calls GET /api/orders/{orderCode}\n   */ getOrderByCode: async (code)=>{\n        const jwt = getJwt();\n        const headers = {};\n        if (jwt) headers[\"Authorization\"] = \"Bearer \".concat(jwt);\n        const response = await fetch(\"/api/orders/\".concat(code), {\n            headers\n        });\n        if (response.status === 404) return null;\n        if (!response.ok) {\n            if (response.status === 401 || response.status === 403) throw new Error(\"Unauthorized\");\n            throw new Error(await extractError(response));\n        }\n        return response.json();\n    },\n    /**\n   * Get order status\n   * Calls GET /api/order-status/{orderCode}\n   */ getOrderStatus: async (code)=>{\n        const jwt = getJwt();\n        const headers = {};\n        if (jwt) headers[\"Authorization\"] = \"Bearer \".concat(jwt);\n        const response = await fetch(\"/api/order-status/\".concat(code), {\n            headers\n        });\n        if (response.status === 404) return null;\n        if (!response.ok) {\n            if (response.status === 401 || response.status === 403) throw new Error(\"Unauthorized\");\n            throw new Error(await extractError(response));\n        }\n        return response.json();\n    }\n};\n// ==================== ADMIN API SERVICES ====================\nconst authService = {\n    /**\n   * Admin login\n   * Calls POST /admin/login\n   */ login: async (username, password)=>{\n        const response = await fetch(\"/admin/login\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                username,\n                password\n            })\n        });\n        if (!response.ok) return false;\n        const data = await response.json();\n        if (data && data.jwttoken) {\n            localStorage.setItem(\"jwt\", data.jwttoken);\n            return true;\n        }\n        return false;\n    },\n    /**\n   * Admin logout\n   */ logout: ()=>{\n        localStorage.removeItem(\"jwt\");\n    },\n    /**\n   * Check if admin is logged in\n   */ isLoggedIn: ()=>{\n        return !!getJwt();\n    },\n    /**\n   * Get current admin user (calls /admin/me)\n   */ getCurrentAdmin: async ()=>{\n        const jwt = getJwt();\n        if (!jwt) return null;\n        const response = await fetch(\"/admin/me\", {\n            headers: {\n                \"Authorization\": \"Bearer \".concat(jwt)\n            }\n        });\n        if (!response.ok) return null;\n        return response.json();\n    }\n};\nconst adminProductService = {\n    /**\n   * Get all products (admin)\n   * Calls GET /admin/api/products\n   */ getAllProducts: async ()=>{\n        const jwt = getJwt();\n        const headers = {};\n        if (jwt) headers[\"Authorization\"] = \"Bearer \".concat(jwt);\n        const response = await fetch(\"/admin/api/products/all\", {\n            headers\n        });\n        if (!response.ok) throw new Error(await extractError(response));\n        return response.json();\n    },\n    /**\n   * Create or update product\n   * Calls POST /admin/products/save\n   */ saveProduct: async (product)=>{\n        const method = product.id ? \"PUT\" : \"POST\";\n        const url = product.id ? \"/admin/api/products/\".concat(product.id) : \"/admin/api/products\";\n        const jwt = getJwt();\n        const headers = {\n            \"Content-Type\": \"application/json\"\n        };\n        if (jwt) headers[\"Authorization\"] = \"Bearer \".concat(jwt);\n        const response = await fetch(url, {\n            method,\n            headers,\n            body: JSON.stringify(product)\n        });\n        if (!response.ok) throw new Error(await extractError(response));\n        return response.json();\n    },\n    /**\n   * Archive product\n   * Calls POST /admin/products/archive/{productId}\n   */ archiveProduct: async (id, archived)=>{\n        const url = archived ? \"/admin/api/products/\".concat(id, \"/archive\") : \"/admin/api/products/\".concat(id, \"/restore\");\n        const jwt = getJwt();\n        const headers = {};\n        if (jwt) headers[\"Authorization\"] = \"Bearer \".concat(jwt);\n        const response = await fetch(url, {\n            method: \"POST\",\n            headers\n        });\n        if (!response.ok) return null;\n        return response.json();\n    }\n};\nconst adminOrderService = {\n    /**\n   * Get all orders (admin)\n   * Calls GET /admin/api/orders\n   */ getAllOrders: async ()=>{\n        const jwt = getJwt();\n        const headers = {};\n        if (jwt) headers[\"Authorization\"] = \"Bearer \".concat(jwt);\n        const response = await fetch(\"/admin/api/orders\", {\n            headers\n        });\n        if (!response.ok) throw new Error(await extractError(response));\n        return response.json();\n    },\n    /**\n   * Update order status\n   * Calls POST /admin/orders/{orderId}/status\n   */ updateOrderStatus: async (id, status)=>{\n        const jwt = getJwt();\n        const headers = {\n            \"Content-Type\": \"application/json\"\n        };\n        if (jwt) headers[\"Authorization\"] = \"Bearer \".concat(jwt);\n        const response = await fetch(\"/admin/api/orders/\".concat(id, \"/status\"), {\n            method: \"PUT\",\n            headers,\n            body: JSON.stringify({\n                status\n            })\n        });\n        if (!response.ok) throw new Error(await extractError(response));\n        return response.json();\n    },\n    /**\n   * Archive order\n   * Calls POST /admin/orders/{orderId}/archive\n   */ archiveOrder: async (id, archived)=>{\n        const url = \"/admin/api/orders/\".concat(id, \"/archive\");\n        const jwt = getJwt();\n        const headers = {};\n        if (jwt) headers[\"Authorization\"] = \"Bearer \".concat(jwt);\n        const response = await fetch(url, {\n            method: \"POST\",\n            headers\n        });\n        if (!response.ok) throw new Error(await extractError(response));\n        return response.json();\n    }\n};\nconst adminUserService = {\n    /**\n   * Get all admin users\n   * Calls GET /admin/api/users\n   */ getAllAdmins: async ()=>{\n        const jwt = getJwt();\n        const headers = {};\n        if (jwt) headers[\"Authorization\"] = \"Bearer \".concat(jwt);\n        const response = await fetch(\"/admin/api/admins\", {\n            headers\n        });\n        if (!response.ok) throw new Error(await extractError(response));\n        return response.json();\n    },\n    /**\n   * Create or update admin user\n   * Calls POST /admin/users/save\n   */ saveAdmin: async (admin)=>{\n        const method = admin.id ? \"PUT\" : \"POST\";\n        const url = admin.id ? \"/admin/api/admins/\".concat(admin.id) : \"/admin/api/admins\";\n        const jwt = getJwt();\n        const headers = {\n            \"Content-Type\": \"application/json\"\n        };\n        if (jwt) headers[\"Authorization\"] = \"Bearer \".concat(jwt);\n        const response = await fetch(url, {\n            method,\n            headers,\n            body: JSON.stringify(admin)\n        });\n        if (!response.ok) throw new Error(await extractError(response));\n        return response.json();\n    },\n    /**\n   * Delete admin user\n   * Calls POST /admin/users/delete/{userId}\n   */ deleteAdmin: async (id)=>{\n        const jwt = getJwt();\n        const headers = {};\n        if (jwt) headers[\"Authorization\"] = \"Bearer \".concat(jwt);\n        const response = await fetch(\"/admin/api/admins/\".concat(id, \"/archive\"), {\n            method: \"POST\",\n            headers\n        });\n        if (!response.ok) throw new Error(await extractError(response));\n        return response.json();\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api-service.ts\n"));

/***/ })

});