A school project ☕ Espressionist E-Commerce – Backend Requirements
🔧 Technologies:
Java 17 + Spring Boot

MySQL/MariaDB (via Docker)

Thymeleaf (for rendering views)

Spring Security (admin login only)

HTML, Tailwind CSS, JS (static pages only)

✅ GENERAL GUIDELINES
Focus on backend.

Frontend only needs basic integration with Thymeleaf (static templates).

Use archived = true instead of deleting records.

Project runs in GitHub Codespaces.

🛍️ USER SIDE (No Login Required)
1. Product Listing
/products — Return all products where archived = false

Includes: image, name, price, stock quantity

2. Shopping Cart
Cart is handled in JavaScript only

At checkout, cart data (productId + quantity) will be sent to backend

3. Checkout
POST /checkout

Required fields:

Name

Email

Shipping Address

Cart Items (product ID + quantity)

Add 12% VAT to total

Save order and items in database

4. Payment
Only Cash on Delivery

No payment gateway required

5. Order Confirmation (No Email)
After checkout, show in-browser confirmation page with:
- Order code (e.g. ESP-3A9KZT1D)
- Item details
- Shipping info
- Total (with VAT)
- Message: “Please save this code to track your order.”

6. Order Status Tracking
/order-status/{orderCode}

Display:

Order date

Item list

Shipping info

Status (Pending, Processing, etc.)

🔐 ADMIN SIDE (Login Required)
Login Credentials (Default):
Username: ADMIN

Password: Espressionist2025

1. Authentication
Use Spring Security

Protect /admin/** routes

Use BCrypt for password hashing

Allow creation/deletion/update of other admins (prevent self-deletion)

2. Product Management
Create, update, archive products

Fields:

Name

Price (> 0)

Quantity (≥ 1)

Category

Image (stored in DB as BLOB or saved to file)

Deletion = set archived = true

3. Order Management
View customer orders:

Name, email, shipping address

Items ordered

Total with VAT

Status

Admin can manually update status (Pending → Shipped, etc.)

Once marked as delivered, option to "complete" order (archives it)

4. Admin Account Management
Admins can manage other admins

Prevent self-deletion for safety

🧱 DATABASE DESIGN
Use JPA (Hibernate) annotations

Entity: Product, Order, OrderItem, Admin

Relationships:

One Order → Many OrderItems

Each OrderItem links to a Product

Add archived: boolean to deletable records