☕ Espressionist E-Commerce — Backend Requirements (School Project Edition)

🔧 Technologies (Use in GitHub Codespaces)

Java 17 + Spring Boot — core backend framework

MySQL/MariaDB — via Docker container

Thymeleaf — for rendering views

Spring Security — for admin login

HTML, Tailwind CSS, JS — used for static assets and frontend templates

✅ General Guidelines

Backend-first: The main focus is on backend features and logic.

Frontend integration: Only light Thymeleaf usage with static pages.

Soft delete only: Use archived = true instead of deleting any records.

Platform: Entire project runs inside GitHub Codespaces.

🛍️ USER SIDE (No Login Required)

1. Product Listing

GET /products — Return all products where archived = false

Response includes: image, name, price, stock quantity

2. Shopping Cart

Cart logic is handled in JavaScript only

At checkout, frontend sends a payload of cart items: [ { productId, quantity }, ... ]

3. Checkout

POST /checkout

Required fields:

name

email

shippingAddress

cartItems (each with productId and quantity)

Add 12% VAT to total

Save order + order items to the database

4. Payment

Only Cash on Delivery (COD)

No payment gateway integration

5. Order Confirmation

After successful checkout, display confirmation page with:

Order Code (e.g. ESP-3A9KZT1D)

Items ordered

Shipping info

Total with VAT

Message: “Please save this code to track your order.”

6. Order Status Tracking

GET /order-status/{orderCode}

Show:

Order Date

List of Items

Shipping Info

Order Status (e.g. Pending, Processing, Shipped, Delivered)

🔐 ADMIN SIDE (Login Required)

Login Credentials (Default for Testing)

Username: ADMIN

Password: Espressionist2025

1. Authentication

Use Spring Security

Protect all /admin/** routes

Use BCrypt for storing passwords

Allow admin CRUD but prevent self-deletion

2. Product Management

Admins can create, update, and archive products

Product Fields:

Name

Price (must be > 0)

Quantity (must be ≥ 1)

Category

Image (stored either as BLOB or saved as file — choose one method)

Product deletion = set archived = true

3. Order Management

View orders with:

Customer name, email, shipping address

Items ordered

Total (with VAT)

Current status

Admin can manually update order status

Example: Pending → Processing → Shipped → Delivered

Once marked as Delivered, admin can archive the order

4. Admin Account Management

Admins can manage other admins (create/update/delete)

Prevent deleting your own account for safety

🧱 Database Design (via JPA + Hibernate)

Entities

Product

Order

OrderItem

Admin

Relationships

One Order → Many OrderItems

Each OrderItem → One Product

Common Field

All deletable entities should include: archived: boolean

📚 Final Notes

This backend should work well with or without a fully working frontend.

All logic should be testable and clear for instructor demos.

Keep backend modular — controllers thin, services handle logic.

Good luck with your school project — keep it clean, simple, and functional!